// <auto-generated />
using System;
using Egy_Walks.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Egy_Walks.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Egy_Walks.Api.Models.Domain.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8676ca12-ad01-439d-ac9e-2cc406f2191b"),
                            Name = "Easy"
                        },
                        new
                        {
                            Id = new Guid("4612e530-90e2-4439-97ee-793e708d7cfc"),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = new Guid("ad563ab3-3f1d-457b-8003-3a019104b7c5"),
                            Name = "Hard"
                        });
                });

            modelBuilder.Entity("Egy_Walks.Api.Models.Domain.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe1a5e3c-628d-48fc-ac4b-22e80a824ee5"),
                            Code = "Egy Mus",
                            Name = "Egyptian Musuem",
                            RegionImageUrl = "egy-mus.jpg"
                        },
                        new
                        {
                            Id = new Guid("595c6878-3543-4dfc-a80f-8298d4d240d7"),
                            Code = "Pyramids",
                            Name = "Pyramids",
                            RegionImageUrl = "pyramids.jpg"
                        },
                        new
                        {
                            Id = new Guid("375973dd-7e65-40c0-8ec3-9e492a6a9e00"),
                            Code = "St Cath Mtn",
                            Name = "St Catherine's Mountain",
                            RegionImageUrl = "mountain.jpg"
                        },
                        new
                        {
                            Id = new Guid("f8435b3c-b679-4573-bf2d-cc504a8eac98"),
                            Code = "Cairo",
                            Name = "Cairo",
                            RegionImageUrl = "cairo.jpg"
                        },
                        new
                        {
                            Id = new Guid("798c2184-d738-4f87-8108-23615b917929"),
                            Code = "Helwan",
                            Name = "Helwan",
                            RegionImageUrl = "helwan.jpg"
                        },
                        new
                        {
                            Id = new Guid("80c79166-7e85-4c0e-9faa-3f0a5e809301"),
                            Code = "The Nile",
                            Name = "The Nile",
                            RegionImageUrl = "nile.jpg"
                        });
                });

            modelBuilder.Entity("Egy_Walks.Api.Models.Domain.Walk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("LengthInKm")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalkImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("RegionId");

                    b.ToTable("Walks");
                });

            modelBuilder.Entity("Egy_Walks.Api.Models.Domain.Walk", b =>
                {
                    b.HasOne("Egy_Walks.Api.Models.Domain.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egy_Walks.Api.Models.Domain.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Region");
                });
#pragma warning restore 612, 618
        }
    }
}
